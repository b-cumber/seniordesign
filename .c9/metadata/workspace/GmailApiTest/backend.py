{"filter":false,"title":"backend.py","tooltip":"/GmailApiTest/backend.py","undoManager":{"mark":8,"position":8,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":40,"column":42},"action":"insert","lines":["#!/usr/bin/python","","import httplib2","","from apiclient.discovery import build","from oauth2client.client import flow_from_clientsecrets","from oauth2client.file import Storage","from oauth2client.tools import run","","","# Path to the client_secret.json file downloaded from the Developer Console","CLIENT_SECRET_FILE = 'client_secret.json'","","# Check https://developers.google.com/gmail/api/auth/scopes for all available scopes","OAUTH_SCOPE = 'https://www.googleapis.com/auth/gmail.readonly'","","# Location of the credentials storage file","STORAGE = Storage('gmail.storage')","","# Start the OAuth flow to retrieve credentials","flow = flow_from_clientsecrets(CLIENT_SECRET_FILE, scope=OAUTH_SCOPE)","http = httplib2.Http()","","# Try to retrieve credentials from storage or run the flow to generate them","credentials = STORAGE.get()","if credentials is None or credentials.invalid:","  credentials = run(flow, STORAGE, http=http)","","# Authorize the httplib2.Http object with our credentials","http = credentials.authorize(http)","","# Build the Gmail service from discovery","gmail_service = build('gmail', 'v1', http=http)","","# Retrieve a page of threads","threads = gmail_service.users().threads().list(userId='me').execute()","","# Print ID for each thread","if threads['threads']:","  for thread in threads['threads']:","    print 'Thread ID: %s' % (thread['id'])"]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":35},"end":{"row":11,"column":36},"action":"insert","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":36},"end":{"row":11,"column":38},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":36},"end":{"row":11,"column":38},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":36},"end":{"row":11,"column":37},"action":"insert","lines":["3"]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":36},"end":{"row":11,"column":37},"action":"remove","lines":["3"]}]}],[{"group":"doc","deltas":[{"start":{"row":11,"column":35},"end":{"row":11,"column":36},"action":"remove","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"insert","lines":["j"]}]}],[{"group":"doc","deltas":[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["j"]}]}]]},"ace":{"folds":[],"scrolltop":214,"scrollleft":0,"selection":{"start":{"row":20,"column":69},"end":{"row":20,"column":69},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1423271303938,"hash":"2d0feb6fe55b119be3ba72fa04fa535b6d5aa096"}